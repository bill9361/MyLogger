<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace:命名空间，其值为对应Dao的具体路径 -->
<mapper namespace="com.bgb.logger.model.dao.UserDaoImpl">

	<resultMap type="com.bgb.logger.model.pojo.User" id="User">
		<!-- 
			property：代表实体类的属性名
			javaType:代表实体类中属性名的类型
			column：数据库中查询语句的字段名
			jdbcType：数据库中查询语句的字段名的类型（可不填）
		 -->
		<result property="username" javaType="String" column="username"/>
		<result property="password" javaType="String" column="password"/>
		<result property="fullname" javaType="String" column="fullname"/>
		<result property="idNumber" javaType="String" column="id_number"/>
		<result property="dateOfBirth" javaType="String" column="date_of_birth"/>
		<result property="isLock" javaType="Integer" column="is_lock"/>
		<result property="workingStatus" javaType="Integer" column="working_status"/>
		<result property="validityStartDate" javaType="String" column="validity_start_date"/>
		<result property="validityEndDate" javaType="String" column="validity_end_date"/>
		<result property="companyId" javaType="String" column="company_id"/>
		<result property="postId" javaType="String" column="post_id"/>
		<result property="tel" javaType="String" column="tel"/>
		<result property="email" javaType="String" column="email"/>
		<result property="qq" javaType="String" column="qq"/>
		<result property="wechat" javaType="String" column="wechat"/>
		<result property="roleId" javaType="String" column="role_id"/>
		<result property="userGroupId" javaType="String" column="user_group_id"/>
		<result property="id" javaType="String" column="id"/>
		<result property="createTime" javaType="String" column="create_time"/>
		<result property="createBy" javaType="String" column="create_by"/>
		<result property="updateTime" javaType="String" column="update_time"/>
		<result property="updateBy" javaType="String" column="update_by"/>
		
		<!-- 对象 -->
		<association property="company" javaType="com.bgb.logger.model.pojo.Company">
			<result property="id" javaType="String" column="coId"/>
			<result property="type" javaType="String" column="coType"/>
			<result property="name" javaType="String" column="coName"/>
			<result property="companyRootId" javaType="String" column="coCompanyRootId"/>
			<result property="addressId" javaType="String" column="coAddressId"/>
			<result property="addressDetail" javaType="String" column="coAddressDetail"/>
			<result property="leaf" javaType="Integer" column="coLeaf"/>
			<result property="parentId" javaType="String" column="coParentId"/>
			<result property="path" javaType="String" column="coPath"/>
		</association>
	</resultMap>

	<sql id="common1">
		is_lock=#{isLock}
	</sql>
	<!-- sql语句保存在mybatis的局部配置文件中 -->
	<!-- 获取所有用户，并返回List<User> -->
	<select id="getAllUser" resultType="com.bgb.logger.model.pojo.User">
		select * from user
	</select>
	<!-- 获取所有用户，并返回List<Map<String,Object>> -->
	<select id="getAllUser2" resultType="Map">
		select * from user
	</select>
	
	<!-- 根据条件查询用户，并返回List<Map<String,Object>> -->
	<!-- 
		&lt;小于
		&gt;大于
	 -->
	<select id="queryUserByCondition" parameterType="Map" resultType="Map">
		select * from user where username=#{username} and password=#{password};
	</select>
	
	
	<!-- 根据条件查询用户2，并返回List<Map<String,Object>> -->
	<select id="queryUserByCondition2" parameterType="Map" resultType="Map">
		select * from user where username='${username}' and password='${password}';
	</select>
	
	
	<!-- 根据条件查询用户3，并返回List<Map<String,Object>> -->
	<select id="queryUserByCondition3" parameterType="Map" resultType="Map">
		select * from user where username=#{username} and password=#{password} and <include refid="common1"/>;
	</select>
	
	
	<!-- 模糊查找，并返回List<Map<String,Object>> -->
	<select id="queryUserByLike" parameterType="Map" resultType="Map">
		select * from user where username like'%${username}%';
	</select>
	
	<!-- 模糊查找，使用#代替$，防止SQL注入 -->
	<select id="queryUserByLike2" parameterType="Map" resultType="Map">
		select * from user where username like concat('%',#{username},'%');
	</select>
	
	<!-- 动态查询 -->
	<select id="queryDynamic1" parameterType="Map" resultType="Map">
		SELECT * FROM user where 1=1
		<if test="username != null">
			and username like concat('%',#{username},'%')
		</if>
		<if test="password != null">
			and password=#{password}
		</if>
		<if test="fullname != null">
			and fullname like concat('%',#{fullname},'%')
		</if>
			order by date_of_birth desc
	</select>
	
	<!-- 动态查询Ongl -->
	<select id="queryDynamic2" parameterType="Map" resultType="Map">
		SELECT * FROM user where 1=1
		<if test="@Ognl@isNotEmpty(username)">
			and username like concat('%',#{username},'%')
		</if>
		<if test="@Ognl@isNotEmpty(password)">
			and password=#{password}
		</if>
		<if test="@Ognl@isNotEmpty(fullname)">
			and fullname like concat('%',#{fullname},'%')
		</if>
			order by date_of_birth desc
	</select>
	
	<!-- 动态查询3 -->
	<select id="queryDynamic3" parameterType="Map" resultType="Map">
		SELECT * FROM user
		<where>
			<if test="@Ognl@isNotEmpty(username)">
				and username like concat('%',#{username},'%')
			</if>
			<if test="@Ognl@isNotEmpty(password)">
				and password=#{password}
			</if>
			<if test="@Ognl@isNotEmpty(fullname)">
				and fullname like concat('%',#{fullname},'%')
			</if>
		</where>
		order by date_of_birth desc
	</select>
	
	
	
	<!-- choose -->
	<select id="queryUserByChoose" parameterType="Map" resultType="Map">
		<choose>
			<when test="type==1">SELECT * FROM user</when>
			<when test="type==2">
				SELECT * FROM user
				<where>
					<if test="@Ognl@isNotEmpty(username)">
						and username like concat('%',#{username},'%')
					</if>
				</where>
			</when>
			<otherwise>
				SELECT * FROM user where username='root'
			</otherwise>
		</choose>
		
	</select>
	
	<!-- 根据Id更新用户信息，set标签能够去除SQL中多余的逗号 -->
	<update id="updateUserById" parameterType="Map">
		update user
		<set>
			<if test="@Ognl@isNotEmpty(password)">
				password=#{password},
			</if>
			<if test="@Ognl@isNotEmpty(fullname)">
				fullname=#{fullname},
			</if>
			id=#{id}
		</set>
		where id=#{id}
	</update>
	
	
	
	<!-- 根据用户名和密码更新用户信息，set标签能够去除SQL中多余的逗号 -->
	<update id="updateUserByUNP" parameterType="Map">
		update user
		<set>
			<if test="@Ognl@isNotEmpty(password)">
				password=#{password},
			</if>
			<if test="@Ognl@isNotEmpty(fullname)">
				fullname=#{fullname},
			</if>
			<if test="@Ognl@isNotEmpty(email)">
				email=#{email},
			</if>
			username=#{username}
		</set>
		where username=#{username} and password=#{password}
	</update>
	
	<!-- 
		一对一关联 
		如果关联上面的resultMap标签id，这里返回值类型就不能使用resultType,而是使用resultMap
	-->
	<!-- where user.id=#{id}; -->
	<select id="one2one" resultMap="User">
		SELECT 
		company.id as coId,company.type as coType,company.name as coName,company.company_root_id as coCompanyRootId,
		company.address_id as coAddressId,company.address_detail as coAddressDetail,
		company.leaf as coLeaf,company.parent_id as coParentId,company.path as coPath,
		user.* FROM user
			inner join company on (user.company_id=company.id)
	</select>
	
	
</mapper>