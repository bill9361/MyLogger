<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
	
	<!-- 配置bean -->
	<bean id="security" class="com.bgb.logger.spring.aop.Security"></bean>
	<bean id="bankServiceImpl" class="com.bgb.logger.spring.aop.BankServiceImpl"></bean>
	<bean id="logger" class="com.bgb.logger.spring.aop.Logger"></bean>
	<bean id="clean" class="com.bgb.logger.spring.aop.Clean"></bean>
	<bean id="auth" class="com.bgb.logger.spring.aop.Auth"></bean>
	<bean id="globalException" class="com.bgb.logger.spring.aop.GlobalException"></bean>
	
	<!-- 配置AOP -->
	<aop:config>
		<!-- 配置切入点（目标类，目标方法） -->
		<aop:pointcut expression="execution(* com.bgb.logger.spring.aop.BankServiceImpl.*(..))" id="bankServiceImpl_pointcut"/>
		<!-- 配置切面 -->
		<aop:aspect ref="auth">
			<!-- 配置环绕通知，在前置通知之后执行，在目标方法（切入点之前执行，用于控制是否放行切入点执行，
				如果不放行，就不再继续执行后置通知，则把环绕通知放在前置通知之前配置，否则如果放在后置通知之后配置虽然没有执行切入点，但是还会继续执行后置通知）
				使用环绕通知，所有切面不要配置order：,因为配置了order至后，虽然没有执行切入点，但是还会继续执行配置了order的后置通知 -->
			<aop:around method="isUserExist" pointcut-ref="bankServiceImpl_pointcut"/>
		</aop:aspect>
		<!-- 配置切面 -->
		<aop:aspect ref="security">
			<!-- aop:before配置前置通知；method：为通知方法名；  pointcut-ref：对应的切入点Id -->
			<aop:before method="isSecurity" pointcut-ref="bankServiceImpl_pointcut"/>
		</aop:aspect>
		<!-- 配置切面 -->
		<aop:aspect ref="clean">
			<!-- 配置后置通知 -->
			<aop:after method="clear" pointcut-ref="bankServiceImpl_pointcut"/>
		</aop:aspect>
		<!-- 配置切面  order:表示，所有后置通知的按order顺序执行（倒序），数值越大，先执行。如果不配置order，则按从底部至顶部的顺序执行（会限制log再执行clean）-->
		<aop:aspect ref="logger">
			<!-- 配置后置通知 -->
			<aop:after method="log" pointcut-ref="bankServiceImpl_pointcut"/>
			<!-- 配置后置通知(接收切入点方法的返回值，如果切入点方法无返回值，是不会执行该后置通知的) -->
			<aop:after-returning method="log1" returning="logData" pointcut-ref="bankServiceImpl_pointcut"/>
		</aop:aspect>
		<!-- 配置切面 -->
		<aop:aspect ref="globalException">
		<!-- 异常通知 -->
			<aop:after-throwing method="handleException" pointcut-ref="bankServiceImpl_pointcut" throwing="ex"/>
		</aop:aspect>
	</aop:config>
	
</beans>